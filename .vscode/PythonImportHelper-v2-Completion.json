[
    {
        "label": "pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pika",
        "description": "pika",
        "detail": "pika",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "execute_values",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "def process_video(file_path):\n    print(f\"Processing video: {file_path}\")\n    time.sleep(5)\n    return [[\"Part 1\", \"00:00\", \"00:30\"], [\"Part 2\", \"00:31\", \"01:00\"]]\ndef update_status_in_postgresql(processing_id, status):\n    query = \"UPDATE processing_status SET status = %s WHERE processing_id = %s\"\n    pg_cursor.execute(query, (status, processing_id))\n    pg_connection.commit()\n    print(f\"Updated status for {processing_id} to {status}\")\ndef save_results_to_mongodb(processing_id, csv_data):",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "update_status_in_postgresql",
        "kind": 2,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "def update_status_in_postgresql(processing_id, status):\n    query = \"UPDATE processing_status SET status = %s WHERE processing_id = %s\"\n    pg_cursor.execute(query, (status, processing_id))\n    pg_connection.commit()\n    print(f\"Updated status for {processing_id} to {status}\")\ndef save_results_to_mongodb(processing_id, csv_data):\n    document = {\n        \"_id\": processing_id,\n        \"result_path\": csv_data\n    }",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "save_results_to_mongodb",
        "kind": 2,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "def save_results_to_mongodb(processing_id, csv_data):\n    document = {\n        \"_id\": processing_id,\n        \"result_path\": csv_data\n    }\n    collection_results.replace_one({\"_id\": processing_id}, document, upsert=True)\n    print(f\"Saved results to MongoDB for {processing_id}\")\ndef on_message(channel, method, properties, body):\n    message = json.loads(body)\n    processing_id = message[\"processing_id\"]",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "def on_message(channel, method, properties, body):\n    message = json.loads(body)\n    processing_id = message[\"processing_id\"]\n    file_path = message[\"file_path\"]\n    print(f\"Received task: {processing_id} - {file_path}\")\n    try:\n        update_status_in_postgresql(processing_id, \"processing\")\n        csv_data = process_video(file_path)\n        save_results_to_mongodb(processing_id, csv_data)\n        update_status_in_postgresql(processing_id, \"completed\")",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "mongo_url",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "mongo_url = os.getenv(\"MONGO_URL\", \"mongodb://localhost:27017\")\nmongo_client = MongoClient(mongo_url)\nmongo_db = mongo_client[\"video_processing_db\"]\ncollection_results = mongo_db[\"collection_results\"]\npg_connection = psycopg2.connect(\n    dbname=os.getenv(\"POSTGRES_DB\", \"video_processing_db\"),\n    user=os.getenv(\"POSTGRES_USER\", \"postgres\"),\n    password=os.getenv(\"POSTGRES_PASSWORD\", \"password\"),\n    host=os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n    port=os.getenv(\"POSTGRES_PORT\", 5440)",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "mongo_client",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "mongo_client = MongoClient(mongo_url)\nmongo_db = mongo_client[\"video_processing_db\"]\ncollection_results = mongo_db[\"collection_results\"]\npg_connection = psycopg2.connect(\n    dbname=os.getenv(\"POSTGRES_DB\", \"video_processing_db\"),\n    user=os.getenv(\"POSTGRES_USER\", \"postgres\"),\n    password=os.getenv(\"POSTGRES_PASSWORD\", \"password\"),\n    host=os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n    port=os.getenv(\"POSTGRES_PORT\", 5440)\n)",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "mongo_db",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "mongo_db = mongo_client[\"video_processing_db\"]\ncollection_results = mongo_db[\"collection_results\"]\npg_connection = psycopg2.connect(\n    dbname=os.getenv(\"POSTGRES_DB\", \"video_processing_db\"),\n    user=os.getenv(\"POSTGRES_USER\", \"postgres\"),\n    password=os.getenv(\"POSTGRES_PASSWORD\", \"password\"),\n    host=os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n    port=os.getenv(\"POSTGRES_PORT\", 5440)\n)\npg_cursor = pg_connection.cursor()",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "collection_results",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "collection_results = mongo_db[\"collection_results\"]\npg_connection = psycopg2.connect(\n    dbname=os.getenv(\"POSTGRES_DB\", \"video_processing_db\"),\n    user=os.getenv(\"POSTGRES_USER\", \"postgres\"),\n    password=os.getenv(\"POSTGRES_PASSWORD\", \"password\"),\n    host=os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n    port=os.getenv(\"POSTGRES_PORT\", 5440)\n)\npg_cursor = pg_connection.cursor()\ndef process_video(file_path):",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "pg_connection",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "pg_connection = psycopg2.connect(\n    dbname=os.getenv(\"POSTGRES_DB\", \"video_processing_db\"),\n    user=os.getenv(\"POSTGRES_USER\", \"postgres\"),\n    password=os.getenv(\"POSTGRES_PASSWORD\", \"password\"),\n    host=os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n    port=os.getenv(\"POSTGRES_PORT\", 5440)\n)\npg_cursor = pg_connection.cursor()\ndef process_video(file_path):\n    print(f\"Processing video: {file_path}\")",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "pg_cursor",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "pg_cursor = pg_connection.cursor()\ndef process_video(file_path):\n    print(f\"Processing video: {file_path}\")\n    time.sleep(5)\n    return [[\"Part 1\", \"00:00\", \"00:30\"], [\"Part 2\", \"00:31\", \"01:00\"]]\ndef update_status_in_postgresql(processing_id, status):\n    query = \"UPDATE processing_status SET status = %s WHERE processing_id = %s\"\n    pg_cursor.execute(query, (status, processing_id))\n    pg_connection.commit()\n    print(f\"Updated status for {processing_id} to {status}\")",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "rabbitmq_host",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "rabbitmq_host = os.getenv(\"RABBIT_HOST\", \"localhost\")\nrabbitmq_port = os.getenv(\"RABBIT_PORT\", 5672)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=rabbitmq_host, port=rabbitmq_port))\nchannel = connection.channel()\nchannel.queue_declare(queue=\"video_processing\")\nchannel.basic_consume(queue=\"video_processing\", on_message_callback=on_message)\nprint(\"Waiting for messages...\")\nchannel.start_consuming()",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "rabbitmq_port",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "rabbitmq_port = os.getenv(\"RABBIT_PORT\", 5672)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=rabbitmq_host, port=rabbitmq_port))\nchannel = connection.channel()\nchannel.queue_declare(queue=\"video_processing\")\nchannel.basic_consume(queue=\"video_processing\", on_message_callback=on_message)\nprint(\"Waiting for messages...\")\nchannel.start_consuming()",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "connection = pika.BlockingConnection(pika.ConnectionParameters(host=rabbitmq_host, port=rabbitmq_port))\nchannel = connection.channel()\nchannel.queue_declare(queue=\"video_processing\")\nchannel.basic_consume(queue=\"video_processing\", on_message_callback=on_message)\nprint(\"Waiting for messages...\")\nchannel.start_consuming()",
        "detail": "ml.worker",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "ml.worker",
        "description": "ml.worker",
        "peekOfCode": "channel = connection.channel()\nchannel.queue_declare(queue=\"video_processing\")\nchannel.basic_consume(queue=\"video_processing\", on_message_callback=on_message)\nprint(\"Waiting for messages...\")\nchannel.start_consuming()",
        "detail": "ml.worker",
        "documentation": {}
    }
]