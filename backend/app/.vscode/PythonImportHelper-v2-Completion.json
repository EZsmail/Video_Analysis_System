[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "process_video",
        "importPath": "app.workers.task_queue",
        "description": "app.workers.task_queue",
        "isExtraImport": true,
        "detail": "app.workers.task_queue",
        "documentation": {}
    },
    {
        "label": "ml_service",
        "importPath": "app.services",
        "description": "app.services",
        "isExtraImport": true,
        "detail": "app.services",
        "documentation": {}
    },
    {
        "label": "ml_service",
        "importPath": "app.services",
        "description": "app.services",
        "isExtraImport": true,
        "detail": "app.services",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "database.mongo",
        "description": "database.mongo",
        "isExtraImport": true,
        "detail": "database.mongo",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "database.mongo",
        "description": "database.mongo",
        "isExtraImport": true,
        "detail": "database.mongo",
        "documentation": {}
    },
    {
        "label": "VideoStateRepository",
        "importPath": "database.repositories",
        "description": "database.repositories",
        "isExtraImport": true,
        "detail": "database.repositories",
        "documentation": {}
    },
    {
        "label": "VideoDataRepository",
        "importPath": "database.repositories",
        "description": "database.repositories",
        "isExtraImport": true,
        "detail": "database.repositories",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "app.database.mongo",
        "description": "app.database.mongo",
        "isExtraImport": true,
        "detail": "app.database.mongo",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "CELERY_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "envparse",
        "description": "envparse",
        "isExtraImport": true,
        "detail": "envparse",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "routes",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes",
        "description": "api.routes",
        "peekOfCode": "router = APIRouter()\n# Load Video From User\n@router.post(\"/upload-video/\")\nasync def upload_video(file: UploadFile = File(...)):\n    vid = uuid4()\n    file_location = f\"app/uploads/{file.filename}\"\n    with open(file_location, \"wb+\") as file_object:\n        file_object.write(file.file.read())\n    # TODO: Send task to Selery\n    # process_video.delay(file_location, vid)",
        "detail": "api.routes",
        "documentation": {}
    },
    {
        "label": "videos_collection",
        "kind": 5,
        "importPath": "api.routes",
        "description": "api.routes",
        "peekOfCode": "videos_collection = {}",
        "detail": "api.routes",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "kind": 6,
        "importPath": "database.mongo",
        "description": "database.mongo",
        "peekOfCode": "class MongoDBClient:\n    def __init__(self, uri: str, db_name: str):\n        self.client = MongoClient(uri)\n        self.db = self.client[db_name]\n    def get_collection(self, collection_name: str):\n        return self.db[collection_name]",
        "detail": "database.mongo",
        "documentation": {}
    },
    {
        "label": "VideoStateRepository",
        "kind": 6,
        "importPath": "database.repositories",
        "description": "database.repositories",
        "peekOfCode": "class VideoStateRepository:\n    def __init__(self, db_client: MongoDBClient, collection_name: str = \"video_states\"):\n        self.collection = db_client.get_collection(collection_name)\n    def add_video_state(self, video_id: str, state: str):\n        document = {\"_id\": video_id, \"state\": state}\n        self.collection.insert_one(document)\n    def get_video_state(self, video_id: str) -> dict:\n        return self.collection.find_one({\"_id\": video_id})\nclass VideoDataRepository:\n    def __init__(self, db_client: MongoDBClient, collection_name: str = \"video_data\"):",
        "detail": "database.repositories",
        "documentation": {}
    },
    {
        "label": "VideoDataRepository",
        "kind": 6,
        "importPath": "database.repositories",
        "description": "database.repositories",
        "peekOfCode": "class VideoDataRepository:\n    def __init__(self, db_client: MongoDBClient, collection_name: str = \"video_data\"):\n        self.collection = db_client.get_collection(collection_name)\n    def add_video_data(self, video_id: str, csv_data: str):\n        document = {\"_id\": video_id, \"csv\": csv_data}\n        self.collection.insert_one(document)\n    def get_video_data(self, video_id: str) -> dict:\n        return self.collection.find_one({\"_id\": video_id})",
        "detail": "database.repositories",
        "documentation": {}
    },
    {
        "label": "ml_template",
        "kind": 2,
        "importPath": "ml.ml",
        "description": "ml.ml",
        "peekOfCode": "def ml_template(_id: str, url: str) -> tuple:\n    data = [\n        ['ID', 'Name', 'Age'],\n        [1, 'John', 28],\n        [2, 'Jane', 22]\n    ]\n    output = io.StringIO()\n    csv_writer = csv.writer(output)\n    csv_writer.writerows(data)\n    csv_content = output.getvalue()",
        "detail": "ml.ml",
        "documentation": {}
    },
    {
        "label": "VideoModel",
        "kind": 6,
        "importPath": "models.video",
        "description": "models.video",
        "peekOfCode": "class VideoModel(BaseModel):\n    video_id: str\n    file_path: str\n    status: str\n    result: dict = None",
        "detail": "models.video",
        "documentation": {}
    },
    {
        "label": "save_results",
        "kind": 2,
        "importPath": "services.ml_service",
        "description": "services.ml_service",
        "peekOfCode": "def save_results(video_id: str, data: dict): \n    # TODO: add save to db\n    results_db[video_id] = data\n#get data\ndef get_results(video_id: str):\n    return results_db.get(video_id)\n# init db\nresults_db = {}",
        "detail": "services.ml_service",
        "documentation": {}
    },
    {
        "label": "get_results",
        "kind": 2,
        "importPath": "services.ml_service",
        "description": "services.ml_service",
        "peekOfCode": "def get_results(video_id: str):\n    return results_db.get(video_id)\n# init db\nresults_db = {}",
        "detail": "services.ml_service",
        "documentation": {}
    },
    {
        "label": "results_db",
        "kind": 5,
        "importPath": "services.ml_service",
        "description": "services.ml_service",
        "peekOfCode": "results_db = {}",
        "detail": "services.ml_service",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "workers.task_queue",
        "description": "workers.task_queue",
        "peekOfCode": "def process_video(file_path: str):\n    # TODO: Add ML \n    time.sleep(10) #TODO: Remove\n    video_id = \"video_123\"  \n    # TODO: Change to db\n    ml_service.save_results(video_id, {\"csv_data\": \"example,data\"})\n    return video_id",
        "detail": "workers.task_queue",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 5,
        "importPath": "celery_config",
        "description": "celery_config",
        "peekOfCode": "celery = Celery(\n    \"ml\",\n    broker=CELERY_URL\n)\n# Load tasks\ncelery.autodiscover_tasks([\"app.workers.task_queue\"])",
        "detail": "celery_config",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "env = Env()\nDATABASE_URL = env.str(\n    'DB_URL',\n    default=\"mongodb://qioto:qwerty@mongo:27017/\"\n)\nCELERY_URL = env.str(\n    \"CELERY_URL\",\n    default=\"pyamqp://guest:guest@localhost//\"\n)",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DATABASE_URL = env.str(\n    'DB_URL',\n    default=\"mongodb://qioto:qwerty@mongo:27017/\"\n)\nCELERY_URL = env.str(\n    \"CELERY_URL\",\n    default=\"pyamqp://guest:guest@localhost//\"\n)",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CELERY_URL",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CELERY_URL = env.str(\n    \"CELERY_URL\",\n    default=\"pyamqp://guest:guest@localhost//\"\n)",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"message\": \"Backend is running!\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# TODO: Change in prod\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  \n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nmongo_client = MongoDBClient(uri=DATABASE_URL, db_name=\"video_db\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mongo_client",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "mongo_client = MongoDBClient(uri=DATABASE_URL, db_name=\"video_db\")\napp.include_router(routes.router)\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Backend is running!\"}",
        "detail": "main",
        "documentation": {}
    }
]