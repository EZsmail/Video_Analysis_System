[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "VideoStateRepository",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "VideoDataRepository",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "app.database.mongo",
        "description": "app.database.mongo",
        "isExtraImport": true,
        "detail": "app.database.mongo",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "app.database.mongo",
        "description": "app.database.mongo",
        "isExtraImport": true,
        "detail": "app.database.mongo",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_PATH",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "ConnectionFailure",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "DuplicateKeyError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "ConnectionFailure",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "envparse",
        "description": "envparse",
        "isExtraImport": true,
        "detail": "envparse",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "importPath": "app.config.celery_config",
        "description": "app.config.celery_config",
        "isExtraImport": true,
        "detail": "app.config.celery_config",
        "documentation": {}
    },
    {
        "label": "ML",
        "importPath": "app.ml",
        "description": "app.ml",
        "isExtraImport": true,
        "detail": "app.ml",
        "documentation": {}
    },
    {
        "label": "video_data_repo",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "video_state_repo",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "routes",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "router = APIRouter()\n# DB init\ndb_client = MongoDBClient(uri=DATABASE_URL, db_name=\"video_db\")\nvideo_state_repo = VideoStateRepository(db_client)\nvideo_data_repo = VideoDataRepository(db_client)\n@router.post(\"/upload-video/\")\nasync def upload_video(file: UploadFile = File(...)):\n    # Проверка подключения к БД\n    try:\n        client = MongoClient(DATABASE_URL)",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "db_client",
        "kind": 5,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "db_client = MongoDBClient(uri=DATABASE_URL, db_name=\"video_db\")\nvideo_state_repo = VideoStateRepository(db_client)\nvideo_data_repo = VideoDataRepository(db_client)\n@router.post(\"/upload-video/\")\nasync def upload_video(file: UploadFile = File(...)):\n    # Проверка подключения к БД\n    try:\n        client = MongoClient(DATABASE_URL)\n        client.admin.command('ping')\n        print(\"MongoDB доступен\")",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "video_state_repo",
        "kind": 5,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "video_state_repo = VideoStateRepository(db_client)\nvideo_data_repo = VideoDataRepository(db_client)\n@router.post(\"/upload-video/\")\nasync def upload_video(file: UploadFile = File(...)):\n    # Проверка подключения к БД\n    try:\n        client = MongoClient(DATABASE_URL)\n        client.admin.command('ping')\n        print(\"MongoDB доступен\")\n    except ConnectionFailure as e:",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "video_data_repo",
        "kind": 5,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "video_data_repo = VideoDataRepository(db_client)\n@router.post(\"/upload-video/\")\nasync def upload_video(file: UploadFile = File(...)):\n    # Проверка подключения к БД\n    try:\n        client = MongoClient(DATABASE_URL)\n        client.admin.command('ping')\n        print(\"MongoDB доступен\")\n    except ConnectionFailure as e:\n        print(f\"Ошибка подключения к MongoDB: {e}\")",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "kind": 5,
        "importPath": "app.config.celery_config",
        "description": "app.config.celery_config",
        "peekOfCode": "celery_app = Celery(\n    'app',\n    broker='amqp://guest:guest@localhost:5672//',  # Подключение к RabbitMQ через localhost\n    backend='redis://localhost:6379/0',  # Подключение к Redis через localhost\n)\n# Конфигурация задач Celery\ncelery_app.conf.update(\n    task_routes={\n        'app.tasks.*': {'queue': 'default'},\n    },",
        "detail": "app.config.celery_config",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "env = Env()\nDATABASE_URL = env.str(\n    'DB_URL',\n    default=\"mongodb://qioto:qwerty@localhost:27017/\"\n)\nCELERY_URL = env.str(\n    \"CELERY_URL\",\n    default=\"pyamqp://guest:guest@localhost//\"\n)\nUPLOAD_PATH = env.str(",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "DATABASE_URL = env.str(\n    'DB_URL',\n    default=\"mongodb://qioto:qwerty@localhost:27017/\"\n)\nCELERY_URL = env.str(\n    \"CELERY_URL\",\n    default=\"pyamqp://guest:guest@localhost//\"\n)\nUPLOAD_PATH = env.str(\n    \"UPLOAD_PATH\",",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "CELERY_URL",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "CELERY_URL = env.str(\n    \"CELERY_URL\",\n    default=\"pyamqp://guest:guest@localhost//\"\n)\nUPLOAD_PATH = env.str(\n    \"UPLOAD_PATH\",\n    default=\"../data/upload/\"\n)",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "UPLOAD_PATH",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "UPLOAD_PATH = env.str(\n    \"UPLOAD_PATH\",\n    default=\"../data/upload/\"\n)",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "kind": 6,
        "importPath": "app.database.mongo",
        "description": "app.database.mongo",
        "peekOfCode": "class MongoDBClient:\n    def __init__(self, uri: str, db_name: str):\n        self.client = MongoClient(uri)\n        self.db = self.client[db_name]\n    def get_collection(self, collection_name: str):\n        return self.db[collection_name]",
        "detail": "app.database.mongo",
        "documentation": {}
    },
    {
        "label": "VideoStateRepository",
        "kind": 6,
        "importPath": "app.database.repositories",
        "description": "app.database.repositories",
        "peekOfCode": "class VideoStateRepository:\n    def __init__(self, db_client: MongoDBClient, collection_name: str = \"video_states\"):\n        self.collection = db_client.get_collection(collection_name)\n    def add_video_state(self, video_id: str, state: str):\n        document = {\"_id\": video_id, \"state\": state}\n        try:\n            self.collection.insert_one(document)\n        except DuplicateKeyError:\n            raise ValueError(f\"Video state with ID '{video_id}' already exists.\")\n        except PyMongoError as e:",
        "detail": "app.database.repositories",
        "documentation": {}
    },
    {
        "label": "VideoDataRepository",
        "kind": 6,
        "importPath": "app.database.repositories",
        "description": "app.database.repositories",
        "peekOfCode": "class VideoDataRepository:\n    def __init__(self, db_client: MongoDBClient, collection_name: str = \"video_data\"):\n        self.collection = db_client.get_collection(collection_name)\n    def add_video_data(self, video_id: str, csv_data: str):\n        document = {\"_id\": video_id, \"csv\": csv_data}\n        try:\n            self.collection.insert_one(document)\n        except DuplicateKeyError:\n            raise ValueError(f\"Video data with ID '{video_id}' already exists.\")\n        except PyMongoError as e:",
        "detail": "app.database.repositories",
        "documentation": {}
    },
    {
        "label": "ML",
        "kind": 6,
        "importPath": "app.ml.ml",
        "description": "app.ml.ml",
        "peekOfCode": "class ML:\n    def __init__(self, _id, url):\n        self._id = _id\n        self.url = url\n    # TODO: Change to ML\n    def ml_template(self) -> tuple:\n        data = [\n            ['ID', 'Name', 'Age'],\n            [1, 'John', 28],\n            [2, 'Jane', 22]",
        "detail": "app.ml.ml",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "app.tasks.tasks",
        "description": "app.tasks.tasks",
        "peekOfCode": "def process_video(file_location: str, vid: str):\n    # ML init\n    ml_model = ML(vid, file_location)\n    video_id, csv_data = ml_model.ml_template()\n    # save csv to db\n    video_data_repo.add_video_data(video_id, csv_data)\n    # update state\n    video_state_repo.update_video_state(video_id, \"completed\")",
        "detail": "app.tasks.tasks",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def read_root():\n    return {\"message\": \"Backend is running!\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# TODO: Change in prod\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  \n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n)\napp.include_router(routes.router)",
        "detail": "app.main",
        "documentation": {}
    }
]